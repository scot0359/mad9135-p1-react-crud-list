{"version":3,"sources":["ListItem.js","ListView.js","AppHeader.js","NewItemView.js","EditItemView.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","className","item","name","dev","href","website","target","rel","to","id","activeClassName","onClick","delete","ListView","listViewJsx","this","items","map","key","handleRemove","React","Component","AppHeader","exact","NewItemView","state","handleNameChange","event","setState","value","handleDevChange","handleWebsiteChange","handleFormSubmit","preventDefault","obj","cuid","handleSubmit","arr","games","localStorage","getItem","JSON","parse","push","Array","from","Set","setItem","stringify","type","onChange","EditItemView","handleFormEdit","match","params","itemId","edit","App","addItem","prevState","removeItem","targetItem","filter","clear","editItem","newItems","getLocalStorage","basename","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc70220b.chunk.js","sourcesContent":["import React from 'react'\nimport './ListItem.css'\nimport {NavLink} from 'react-router-dom'\n\nfunction ListItem (props) {\n        return (\n                <div className=\"items-card\">\n                    <div className=\"item-info\">\n                        <h2>\n                            {props.item.name}\n                        </h2>\n\n                        <div className=\"item-info2\">\n                            <h4>\n                                Created by {props.item.dev}\n                            </h4>\n                            <div className=\"divider2\"/>\n                            <h4>\n                                <a href={props.item.website} target=\"_blank\" rel=\"noopener noreferrer\">\n                                    Official Website\n                                </a>\n                            </h4>\n                        </div>\n                    </div>\n                    \n                    <div className=\"item-nav\">\n                    <NavLink to={`/edit-item/${props.item.id}`} activeClassName=\"current\" className=\"add\"><button className=\"editBtn\">Edit</button></NavLink>\n                        <div className=\"divider\"/>\n                        <button className=\"deleteBtn\" onClick={() => props.delete(props.item)}>Delete</button>\n                    </div>\n                        \n                </div>\n        )\n    }\n\n\nexport default ListItem","import React from 'react'\nimport './ListView.css'\nimport ListItem from './ListItem'\n\nclass ListView extends React.Component {\n\n    render() {\n        const listViewJsx = this.props.items.map(item => (\n            <ListItem key={item.id} item={item} delete={this.props.handleRemove}/>\n          ))\n        return (\n            <div className=\"itemsList\">\n                {listViewJsx}\n            </div>\n        )\n    }\n}\n\nexport default ListView","import React from 'react'\nimport './AppHeader.css'\nimport {NavLink} from 'react-router-dom'\n\nfunction AppHeader () {\n    return (\n        <>\n            <div className=\"Header-Nav\">\n                <div className=\"div\">\n                    \n                </div>\n\n                <div className=\"header-title\">\n                    <h1>Video Games</h1>\n                </div>\n                \n                <div className=\"add-btn\">\n                    <NavLink to=\"/new-item\" exact activeClassName=\"current\" className=\"add\">+ Add Game</NavLink>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default AppHeader","import React from 'react'\nimport './NewItemView.css'\nimport {NavLink} from 'react-router-dom'\nimport cuid from 'cuid';\n\nclass NewItemView extends React.Component {\n\n    state = {\n        name: \"\",\n        dev: \"\",\n        website: \"\"\n    }\n\n    handleNameChange = (event) => {\n        this.setState({ name: event.target.value})\n    }\n\n    handleDevChange = (event) => {\n        this.setState({ dev: event.target.value})\n    }\n\n    handleWebsiteChange = (event) => {\n        this.setState({ website: event.target.value})\n    }\n\n    handleFormSubmit = event => {\n        \n        event.preventDefault()\n        let obj = {\n            id: cuid(),\n            name: this.state.name,\n            dev: this.state.dev,\n            website: this.state.website\n        }\n\n        \n        this.props.handleSubmit(obj)\n        this.setState({name: '', dev: '', website: ''})\n        \n        let games = localStorage.getItem('myGames')\n        let arr\n        if(games){\n            arr = JSON.parse(games)\n            arr.push(obj)\n            arr = Array.from(new Set(arr))\n            localStorage.setItem('myGames', JSON.stringify(arr))\n        }else{\n            arr = []\n            arr.push(obj)\n            localStorage.setItem('myGames', JSON.stringify(arr))\n        }\n    }\n\n\n    render () {\n        return (\n            <div className=\"newItemForm\">\n                <h1>\n                    Add a new video game\n                </h1>\n                <form className=\"addItem\" >\n                    <div className=\"formName\">\n                        <h3>\n                            Name:\n                        </h3>\n                        <input type=\"text\" value={this.props.name} onChange={this.handleNameChange}/>\n                    </div>\n                    <div className=\"formDev\">\n                        <h3>\n                            Developer:\n                        </h3>\n                        <input type=\"text\" value={this.props.dev} onChange={this.handleDevChange}/>\n                    </div>\n                    <div className=\"formWebsite\">\n                        <h3>\n                            Official Website:\n                        </h3>\n                        <input type=\"text\" value={this.props.website} onChange={this.handleWebsiteChange}/>\n                    </div>\n                    <div className=\"buttons\">\n                        <div className=\"submit\">\n                            <button type=\"button\" className=\"addBtn\" onClick={this.handleFormSubmit}><NavLink to=\"/\" className=\"cancelBtn\">Add Game</NavLink></button>\n                        </div>\n                        <div className=\"cancel\">\n                            <button type=\"button\" className=\"cancelBtn\"><NavLink to=\"/\" className=\"cancelBtn\">Cancel</NavLink></button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default NewItemView","import React from 'react'\nimport './EditItemView.css'\nimport {NavLink} from 'react-router-dom'\n\nclass EditItemView extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            name: \"\",\n            dev: \"\",\n            website: \"\"\n        }\n    }\n\n    handleNameChange = (event) => {\n        this.setState({ name: event.target.value})\n    }\n\n    handleDevChange = (event) => {\n        this.setState({ dev: event.target.value})\n    }\n\n    handleWebsiteChange = (event) => {\n        this.setState({ website: event.target.value})\n    }\n\n    handleFormEdit = event => {\n        event.preventDefault()\n        let obj = {\n            id: this.props.match.params.itemId,\n            name: this.state.name,\n            dev: this.state.dev,\n            website: this.state.website\n        }\n\n        this.props.edit(obj.id, obj)\n\n        localStorage.getItem('myGames')\n        localStorage.setItem('myGames', JSON.stringify(obj))\n        \n    }\n\n    render () {\n        return (\n            <div className=\"newItemForm\">\n                <h1>\n                    Edit\n                </h1>\n                <form className=\"addItem\" >\n                    <div className=\"formName\">\n                        <h3>\n                            Name:\n                        </h3>\n                        <input type=\"text\" value={this.props.name} onChange={this.handleNameChange}/>\n                    </div>\n                    <div className=\"formDev\">\n                        <h3>\n                            Developer:\n                        </h3>\n                        <input type=\"text\" value={this.props.dev} onChange={this.handleDevChange}/>\n                    </div>\n                    <div className=\"formWebsite\">\n                        <h3>\n                            Official Website:\n                        </h3>\n                        <input type=\"text\" value={this.props.website} onChange={this.handleWebsiteChange}/>\n                    </div>\n                    <div className=\"buttons\">\n                        <div className=\"submit\">\n                            <button type=\"button\" className=\"addBtn\" onClick={this.handleFormEdit}><NavLink to=\"/\" className=\"addBtn\" >Accept</NavLink></button>\n                        </div>\n                        <div className=\"cancel\">\n                            <button type=\"button\" className=\"cancelBtn\"><NavLink to=\"/\" className=\"cancelBtn\">Cancel</NavLink></button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default EditItemView","import React from 'react';\nimport { Route, Switch, HashRouter } from 'react-router-dom'\nimport './App.css';\nimport ListView from './ListView'\nimport AppHeader from './AppHeader'\nimport NewItemView from './NewItemView'\nimport EditItemView from './EditItemView'\nimport cuid from 'cuid';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n        items: [\n            { id: cuid(), name: 'Escape From Tarkov', dev: 'Battlestate Games', website: 'https://www.escapefromtarkov.com/'  },\n            { id: cuid(), name: 'Rainbow Six Siege', dev: 'Ubisoft Montreal', website: 'https://rainbow6.ubisoft.com/siege/en-ca/home/index.aspx'  },\n            { id: cuid(), name: 'Slay the Spire', dev: 'Mega Crit Games', website: 'https://www.megacrit.com/'  }\n        ]\n    }\n  }\n\n  getLocalStorage () {\n    localStorage.getItem('myGames')\n    localStorage.setItem('myGames', JSON.stringify(this.state.items))\n  }\n\n  addItem = item => {\n    this.setState((prevState) => ({\n      items: [...prevState.items, item],\n    }));\n  }\n\n  removeItem = targetItem => {\n    const items = this.state.items.filter(\n      item => item.id !== targetItem.id\n    )\n    localStorage.clear()\n    this.setState({ items: items })\n\n    localStorage.getItem('myGames')\n    localStorage.setItem('myGames', JSON.stringify(items))\n        \n  }\n\n  editItem = (id, item) => {\n    let newItems = this.state.items.filter(item => {\n      return item.id != id\n    })\n    newItems.push(item)\n    this.setState({\n      items: newItems\n    })\n  }\n\n  componentDidMount () {\n    this.getLocalStorage()\n  }\n\n  render() {\n    return (\n      <HashRouter basename=\"/\">\n        <div className=\"App\">\n          <AppHeader />\n          <Switch>\n            <Route exact path=\"/\">\n              <ListView items={this.state.items} handleRemove={this.removeItem} />\n            </Route>\n            <Route  path=\"/new-item\" Component={NewItemView}>\n              <NewItemView items={this.state.items} handleSubmit={this.addItem}/>\n            </Route>\n            <Route path=\"/edit-item/:itemId\" Component={EditItemView} render={(props) => <EditItemView {...props} edit={this.editItem} />}>\n            </Route>\n          </Switch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}